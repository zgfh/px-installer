#!/bin/sh
#
# Bootstrap installer for Portworx OCI/Docker container
#

# Check debug opt asap
opt_debug=''
echo "$@" | grep -q -- -debug
if [ $? -eq 0 ]; then
    opt_debug='--debug'
    export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -x
fi

# Colors
Cgreen="$(tput setaf 2 2> /dev/null)"
Cred="$(tput bold 2> /dev/null; tput setaf 1 2> /dev/null)"
Cyello="$(tput bold 2> /dev/null; tput setaf 3 2> /dev/null)"
Cnorm="$(tput sgr0 2> /dev/null)"

usage() {
    cat << _EOF
Usage: bootstrap-salt.sh [--oci|--docker|--plugin] [--upgrade] <px-options>

Options:
    --oci      Installs Portworx as OCI Container
    --docker   Installs Portworx as Docker container (plugin v1)
    --plugin   Installs Portworx as Docker V2 plugin

    --upgrade  Upgrades existing Portworx OCI Container (OCI only option)

    <px-options>
               Please see https://docs.portworx.com/runc/#options

Example:
    bootstrap-salt.sh -c MY_CLUSTER_ID -k etcd://myetc.company.com:2379 -s /dev/xvdb -s /dev/xvdc

_EOF
    exit 1
}

fatal() {
    echo "" 2>&1
    echo "${Cred}$@${Cnorm}" 2>&1
    echo "Please try reinstalling again - if the problem persists, please contact support@portworx.com" 2>&1
    exit 1
}

pxopts=''
xtravols=''
opt_upgrade=''
opt_img=''
# INSTALL TYPES: 0 = OCI, 1 = Docker, 2 = Plugin
opt_type=0
typeName='OCI Container'

while [ "$1" != "" ]; do
    case $1 in
        [-]*oci)   opt_type=0; typeName='OCI Container' ;;
        [-]*dock*) opt_type=1; typeName='Docker Container' ;;
        [-]*plug*) opt_type=2; typeName='Docker V2 Plugin' ;;
        [-]*upg*)  opt_upgrade='--upgrade' ;;
        [-]*px)    opt_img="$2"; shift ;;
        -h|--help) usage ;;
        [-]*debug) ;;
        -v)        xtravols="$xtravols -v '$2'"; shift ;;
        *)         pxopts="$pxopts '$1'" ;;
    esac
    shift
done

echo "${Cgreen}Installing Portworx as $typeName ...${Cnorm}"

if [ $opt_type -eq 1 ]; then    # install Docker Container
    opt_img=${opt_img:-portworx/px-enterprise:{{.PxVer}}}
    sudo docker run --restart=always --name portworx -d --net=host --privileged=true \
        -v /run/docker/plugins:/run/docker/plugins -v /var/lib/osd:/var/lib/osd:shared \
        -v /dev:/dev -v /etc/pwx:/etc/pwx -v /opt/pwx/bin:/export_bin \
        -v /var/run/docker.sock:/var/run/docker.sock -v /var/cores:/var/cores \
        -v /usr/src:/usr/src $xtravols --ipc=host \
        $opt_img $opt_debug $pxopts
    if [ $? -ne 0 ]; then
        fatal "Error downloading/installing Portworx Docker Container!"
    fi

elif [ $opt_type -eq 2 ]; then  # install Docker V2 Plugin
    if [ "x$xtravols" != x ]; then
        echo "${Cyello}WARNING: Specifying extra volumes with V2 plugin is not supported (ignoring: $xtravols).${Cnorm}"
    fi
    sudo mkdir -p /etc/pwx /opt/pwx/bin /var/lib/osd /var/cores
    opt_img=${opt_img:-portworx/px:{{.PxVer}}}
    sudo docker plugin install --grant-all-permissions --alias pxd $opt_img "opts=$pxopts"
    if [ $? -ne 0 ]; then
        fatal "Error downloading/installing Portworx Docker V2 plugin!"
    fi

else    # install OCI Container
    echo "${Cgreen}:1/3: Downloading/Installing Portworx OCI bits ...${Cnorm}"
    opt_img=${opt_img:-portworx/px-enterprise:{{.PxVer}}}
    sudo docker run --entrypoint /runc-entry-point.sh --rm -i --privileged=true \
        -v /opt/pwx:/opt/pwx -v /etc/pwx:/etc/pwx $opt_img $opt_debug $opt_upgrade
    if [ $? -ne 0 ]; then
        fatal "Error downloading/installing Portworx OCI Container!"
    fi

    echo "${Cgreen}:2/3: Configuring Portworx OCI ...${Cnorm}"
    sudo /opt/pwx/bin/px-runc install $xtravols $pxopts
    if [ $? -ne 0 ]; then
        fatal "Error configuring Portworx OCI Container!"
    fi

    echo "${Cgreen}:3/3: Enabling/Restarting Portworx OCI service ...${Cnorm}"
    sudo systemctl daemon-reload
    sudo /bin/sh -c "systemctl enable portworx && systemctl restart portworx"
    if [ $? -ne 0 ]; then
        fatal "Error enabling/[re]starting Portworx OCI Container!"
    fi
fi

echo "${Cgreen}Done.${Cnorm}"
